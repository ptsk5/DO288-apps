kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: todoapp
  namespace: jiri-petnik-cz-review-service
  selfLink: >-
    /apis/template.openshift.io/v1/namespaces/jiri-petnik-cz-review-service/templates/todoapp
  uid: d36468ca-b8c1-40e9-8e76-ade704a25b45
  resourceVersion: '31355576'
  creationTimestamp: '2021-03-30T20:22:29Z'
  managedFields:
    - manager: Mozilla
      operation: Update
      apiVersion: template.openshift.io/v1
      time: '2021-03-30T20:38:07Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:objects': {}
        'f:parameters': {}
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations: null
      labels:
        app: backend
      name: backend
    spec:
      lookupPolicy:
        local: false
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations: null
      labels:
        app: tododb
      name: tododb
    spec:
      lookupPolicy:
        local: false
      tags:
        - annotations: null
          from:
            kind: DockerImage
            name: '${DATABASE_IMAGE}'
          name: latest
          referencePolicy:
            type: Source
  - apiVersion: v1
    data:
      init: '${CLEAN_DATABASE}'
    kind: ConfigMap
    metadata:
      name: todoapp
  - apiVersion: v1
    stringData:
      password: '${PASSWORD}'
      user: todoapp
    kind: Secret
    metadata:
      name: tododb
    type: Opaque
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      annotations: null
      labels:
        app: backend
      name: backend
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'backend:latest'
      resources: {}
      successfulBuildsHistoryLimit: 5
      failedBuildsHistoryLimit: 5
      strategy:
        sourceStrategy:
          env:
            - name: npm_config_registry
              value: '${NPM_PROXY}'
          from:
            kind: ImageStreamTag
            name: 'nodejs:12'
            namespace: openshift
        type: Source
      postCommit: {}
      source:
        contextDir: '${BACK_END_CTXDIR}'
        git:
          ref: '${BACK_END_BRANCH}'
          uri: '${BACK_END_REPO}'
        type: Git
      triggers:
        - github:
            secret: '${SECRET}'
          type: GitHub
        - generic:
            secret: '${SECRET}'
          type: Generic
        - type: ConfigChange
        - imageChange: {}
          type: ImageChange
      runPolicy: Serial
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations: null
      labels:
        app: backend
      name: backend
    spec:
      replicas: 1
      selector:
        app: backend
        deploymentconfig: backend
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations: null
          labels:
            app: backend
            deploymentconfig: backend
        spec:
          containers:
            - env:
                - name: DATABASE_NAME
                  value: todo
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: tododb
                - name: DATABASE_SVC
                  value: tododb
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      key: user
                      name: tododb
                - name: DATABASE_INIT
                  valueFrom:
                    configMapKeyRef:
                      key: init
                      name: todoapp
              imagePullPolicy: Always
              name: backend
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              livenessProbe:
                httpGet:
                  path: /todo/api/items-count
                  port: 8080
                initialDelaySeconds: 10
                timeoutSeconds: 3
              redinessProbe:
                httpGet:
                  path: /todo/api/host
                  port: 8080
                initialDelaySeconds: 10
                timeoutSeconds: 3
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - backend
            from:
              kind: ImageStreamTag
              name: 'backend:latest'
          type: ImageChange
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations: null
      labels:
        app: tododb
      name: tododb
    spec:
      replicas: 1
      selector:
        app: tododb
        deploymentconfig: tododb
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations: null
          labels:
            app: tododb
            deploymentconfig: tododb
        spec:
          containers:
            - env:
                - name: MYSQL_DATABASE
                  value: todo
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: tododb
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: user
                      name: tododb
              imagePullPolicy: Always
              name: tododb
              ports:
                - containerPort: 3306
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/mysql/data
                  name: tododb-volume-1
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - emptyDir: {}
              name: tododb-volume-1
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - tododb
            from:
              kind: ImageStreamTag
              name: 'tododb:latest'
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: null
      labels:
        app: backend
      name: backend
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: backend
        deploymentconfig: backend
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: null
      labels:
        app: tododb
      name: tododb
    spec:
      ports:
        - name: 3306-tcp
          port: 3306
          protocol: TCP
          targetPort: 3306
      selector:
        app: tododb
        deploymentconfig: tododb
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: backend
      name: backend
    spec:
      host: '${BACKEND}'
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: backend
        weight: 100
      wildcardPolicy: None
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations: null
      labels:
        app: frontend
      name: frontend
    spec:
      replicas: 1
      selector:
        app: frontend
        deploymentconfig: frontend
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations: null
          labels:
            app: frontend
            deploymentconfig: frontend
        spec:
          containers:
            - env:
                - name: BACKEND_HOST
                  value: '${BACKEND}'
              imagePullPolicy: Always
              name: frontend
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - frontend
            from:
              kind: ImageStreamTag
              name: 'todo-frontend:latest'
              namespace: jiri-petnik-cz-review-common
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: null
      labels:
        app: frontend
      name: frontend
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: frontend
        deploymentconfig: frontend
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: frontend
      name: frontend
    spec:
      host: '${HOSTNAME}'
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: frontend
        weight: 100
      wildcardPolicy: None
parameters:
  - name: DATABASE_IMAGE
    displayName: MySQL server container image full name (with registry)
    value: registry.access.redhat.com/rhscl/mysql-57-rhel7
    required: true
  - name: BACK_END_REPO
    displayName: To Do List back-end Git repository URL
    value: 'https://github.com/ptsk5/DO288-apps'
    required: true
  - name: BACK_END_CTXDIR
    displayName: To Do List back-end project root folder
    value: todo-backend
    required: true
  - name: BACK_END_BRANCH
    displayName: Git branch to build the To Do List back-end
    value: master
    required: true
  - name: NPM_PROXY
    displayName: Npm modules repository URL
    value: 'http://nexus-common.apps.na45.prod.nextcle.com/repository/nodejs'
    required: true
  - name: SECRET
    displayName: Secret for webhooks
    value: '[a-zA-Z0-9]{40}'
    generate: expression
    required: true
  - name: PASSWORD
    displayName: MySQL database password for the todoapp user
    required: true
  - name: HOSTNAME
    displayName: Host name to acccess the To Do List front-end web application
    required: true
  - name: BACKEND
    displayName: Host name to acccess the To Do List back-end HTTP API
    required: true
  - name: CLEAN_DATABASE
    displayName: Clean db
    value: 'false'
    required: true
